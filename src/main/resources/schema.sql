CREATE TABLE IF NOT EXISTS category (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(10) NOT NULL,  
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
 );

CREATE TABLE IF NOT EXISTS stores (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     category_id INT NOT NULL,
     name VARCHAR(50) NOT NULL,  
     image_name VARCHAR(255),
     price INT NOT NULL,
     description VARCHAR(255) NOT NULL,
     postal_code VARCHAR(8) NOT NULL,
     address VARCHAR(255) NOT NULL,
     business_hours VARCHAR(15) NOT NULL,
     phone_number VARCHAR(15) NOT NULL,
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
 );
 
 CREATE TABLE IF NOT EXISTS roles (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(20) NOT NULL,  
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
 );
 
 CREATE TABLE IF NOT EXISTS users (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     role_id INT NOT NULL, 
     name VARCHAR(50) NOT NULL,
     furigana VARCHAR(50) NOT NULL,
     postal_code VARCHAR(8) NOT NULL,
     address VARCHAR(255) NOT NULL,
     phone_number VARCHAR(15) NOT NULL,
     email VARCHAR(255) NOT NULL UNIQUE,
     password VARCHAR(100) NOT NULL,    
     enabled BOOLEAN NOT NULL,
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
     FOREIGN KEY (role_id) REFERENCES roles (id)
 );
 
 CREATE TABLE IF NOT EXISTS verification_tokens(
 	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 	user_id INT NOT NULL UNIQUE,
 	token VARCHAR(255) NOT NULL,
 	created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
 	updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 	FOREIGN KEY(user_id) REFERENCES users (id)
 );
 
 CREATE TABLE IF NOT EXISTS reservation (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     store_id INT NOT NULL,  
     user_id INT NOT NULL, 
     reservation_date DATE NOT NULL,
     reservation_time TIME NOT NULL,
     number_of_people INT NOT NULL,
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
     FOREIGN KEY (store_id) REFERENCES stores(id),
 	 FOREIGN KEY (user_id) REFERENCES users(id)
 );
 
  CREATE TABLE IF NOT EXISTS favorite (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     store_id INT NOT NULL,  
     user_id INT NOT NULL, 
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
     FOREIGN KEY (store_id) REFERENCES stores(id),
 	 FOREIGN KEY (user_id) REFERENCES users(id)
 );
 
  CREATE TABLE IF NOT EXISTS review (
     id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
     store_id INT NOT NULL,  
     user_id INT NOT NULL, 
     review_comment VARCHAR(500) NOT NULL,
     created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
     updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
     FOREIGN KEY (store_id) REFERENCES stores(id),
 	 FOREIGN KEY (user_id) REFERENCES users(id)
 );
 
 CREATE TABLE IF NOT EXISTS passwordreset_tokens(
 	id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 	user_id INT NOT NULL UNIQUE,
 	token VARCHAR(255) NOT NULL,
 	expiry_date DATETIME NOT NULL,
 	FOREIGN KEY(user_id) REFERENCES users (id),
 	UNIQUE (token)
 );
 
 
 
 
 
 
 
 